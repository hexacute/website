---
lang: fr
layout: post.hbs
type: post
draft: true
comments: true
author: madx
title: Résolution d'un push foireux
tags:
  - git
readingTime: 5min
---

{{#markdown}}
Si comme nous tu as la chance de travailler avec [Lionel](/le-crew/),
il peut t'arriver assez fréquemment que ce dernier défonce le repo.

Ce qu'il s'était passé cette fois là ? Le bougre avait simplement poussé son
petit post sur `master`, comme ça, à la bien, sans faire une jolie PR pour qu'on
puisse au moins faire une revue.

![Not funny]({{ happyplan.baseUrls.media }}/memes/rain.gif)

Du coup il a fallu remettre notre repo en ordre et faire une belle branche toute
propre pour créer la PR.

### DISCLAIMER

Cette manip' n'est pas **du tout** recommandée pour annuler une modification
ancienne, surtout si elle a été la base de nouveaux commits ou de branches.
Préférez `git revert` pour annuler une telle modification.

Ici il n'y a pas eu de commit sur `master` depuis, et tout le monde dort, donc
on peut y aller comme un bourrin.

### Objectifs

1. Créer une branche origin/post.vagrant placée sur "[Post] Vagrant, enlarge your VM" (`a1e379d`)
2. Remettre `master` à l'état "Add logo into README" (`85da801`)

### Résolution

La résolution se fait en deux temps. D'abord, on crée la branche correctement et
on la pousse sur le repo distant :

```bash
# On se place sur le commit du post
$ git checkout a1e379d

# On crée une branche à cet endroit
$ git branch post.vagrant

# On pousse la branche
$ git push origin post.vagrant
Total 0 (delta 0), reused 0 (delta 0)
To git@github.com:putaindecode/website.git
 * [new branch]      post.vagrant -> post.vagrant
```

Ensuite, on peut tranquilement mettre un gros coup de hache sur la branche
`master` pour dégager le commit superflu :

```bash
# On se place sur la branche master
$ git checkout master
Lo position précédente de HEAD était  a1e379d... [Post] Vagrant, enlarge your VM
Basculement sur la branche 'master'

# On fait un reset hard au commit voulu
$ git reset --hard 85da801
HEAD is now at 85da801 Add logo into README

# On pousse sur le dépôt distant, avec -f car on écrase l'historique
$ git push -f
Total 0 (delta 0), reused 0 (delta 0)
To git@github.com:putaindecode/website.git
 + e9c848c...85da801 master -> master (forced update)
```

### Et après ?

Après avoir fait ça on prévient les utilisateurs qu'on a fait un push forcé et
qu'ils doivent faire attention quand il vont récupérer les changements du dépôt.

S'ils font un `pull -f` en ayant l'option `pull.rebase` activée, ça ne doit
généralement pas poser de problème, mais ils peuvent avoir des modifications non
poussées, auquel cas ils devront faire un peu plus gaffe à ce qu'il se passe !
{{/markdown}}
